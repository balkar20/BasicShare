
@using ClientLibrary.Services
@using IdentityProvider.Shared
@using Microsoft.AspNetCore.Components
@using ClientLibrary.Interfaces
@using System.Security.Claims
@using BaseClientLibrary.Enums
@using Core.Transfer
@inject AuthStateProvider AuthenticationStateProvider

@* @ViewModel = CrudService.BaseMvvmViewModel; *@

<MudDialog>
    <DialogContent>
        <PooperForm></PooperForm>
        @* <MudImage Src="@imgHash"  /> *@
        @* <MudTextField T="string" Label="Name" @bind-Value="ViewModel.Data.PooperAlias" @bind-Text="ViewModel.Data.PooperAlias"></MudTextField> *@
        @* <MudTextField  T="string" Label="Name" @bind-Value="ViewModel.Data.Description" @bind-Text="ViewModel.Data.Description"></MudTextField> *@
        @* <MudNumericField T="int" Label="Name" @bind-Value="ViewModel.Data.AmountOfPoops"></MudNumericField> *@
        @* *@
        @* <MudFileUpload T="IBrowserFile" FilesChanged="UploadFilesAsync"> *@
        @*     <ButtonTemplate> *@
        @*         <MudFab HtmlTag="label" *@
        @*                 Color="Color.Success" *@
        @*                 Icon="@Icons.Material.Filled.Upload" *@
        @*                 for="@context"/> *@
        @*     </ButtonTemplate> *@
        @* </MudFileUpload> *@
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    private void CloseMe()
    {
        // ViewModel.StatusType = StatusTypes.StatusCanceled;
    }

    void Cancel() => MudDialog.Cancel();

    // protected override async Task OnInitializedAsync()
    // {
    //     // ViewModel = CrudService.MvvmViewModel;
    //     await Task.CompletedTask;
    // }

}

