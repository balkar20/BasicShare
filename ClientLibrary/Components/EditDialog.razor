
@using ClientLibrary.Services
@using IdentityProvider.Shared
@using Microsoft.AspNetCore.Components
@using ClientLibrary.Interfaces
@using System.Security.Claims
@inject AuthStateProvider AuthenticationStateProvider

@inject IBaseCrudService<PooperViewModel, string> CrudService;

<MudDialog>
    <DialogContent>

        @if (_showErrorAlert)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Right" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe())">Error saving pooper!</MudAlert>
        }
        @if (_showSavedAlert)
        {
            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Right" ShowCloseIcon="true" CloseIconClicked="(() => CloseMe())">Pooper Saved!</MudAlert>
        }
        
        @* <MudIcon  Icon="@Icons.Material.Outlined.DoneOutline" Color="Color.Success">Pooper Saved</MudIcon> *@
        @* <MudIcon @ref="Oopoo" hidden="true" Icon="@Icons.Material.Outlined.Error" Color="Color.Error">Error saving pooper</MudIcon> *@
        <MudTextField T="string" Label="Name" @bind-Value="CrudService.BaseMvvmViewModel.Data.PooperAlias" @bind-Text="CrudService.BaseMvvmViewModel.Data.PooperAlias"></MudTextField>
        <MudTextField T="string" Label="Name" @bind-Value="CrudService.BaseMvvmViewModel.Data.Description" @bind-Text="CrudService.BaseMvvmViewModel.Data.Description"></MudTextField>
        <MudNumericField T="int" Label="Name" @bind-Value="CrudService.BaseMvvmViewModel.Data.AmountOfPoops"></MudNumericField>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(async () => await SavePooper())">Save Pooper</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    private bool _showSavedAlert = false;
    private bool _showErrorAlert = false;
    
    private string authMessage;
    private string surnameMessage;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    async Task SavePooper()
    {
        var result = await CrudService.UpdateModelAsync();
        if (result.IsSuccess)
        {
            _showSavedAlert = true;
            return;
        }
        _showErrorAlert = true;
    }
    
    private void CloseMe()
    {
        _showErrorAlert = false;
        _showSavedAlert = false;
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    
    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} is authenticated.";
            claims = user.Claims;
            surnameMessage =
                $"Role: {user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value}";
        }
        else
        {
            authMessage = "The user is NOT authenticated.";
        }
    }
}

