
@using ClientLibrary.Services
@using IdentityProvider.Shared
@using Microsoft.AspNetCore.Components
@using ClientLibrary.Interfaces
@using System.Security.Claims
@using BaseClientLibrary.Enums
@using Core.Transfer
@inject AuthStateProvider AuthenticationStateProvider

@inject IBaseCrudService<PooperViewModel, BaseResponseResult, PooperViewModel> CrudService;
@* @ViewModel = CrudService.BaseMvvmViewModel; *@

<MudDialog>
    <DialogContent>
        <PooperForm></PooperForm>
        @* <MudImage Src="@imgHash"  /> *@
        @* <MudTextField T="string" Label="Name" @bind-Value="ViewModel.Data.PooperAlias" @bind-Text="ViewModel.Data.PooperAlias"></MudTextField> *@
        @* <MudTextField  T="string" Label="Name" @bind-Value="ViewModel.Data.Description" @bind-Text="ViewModel.Data.Description"></MudTextField> *@
        @* <MudNumericField T="int" Label="Name" @bind-Value="ViewModel.Data.AmountOfPoops"></MudNumericField> *@
        @* *@
        @* <MudFileUpload T="IBrowserFile" FilesChanged="UploadFilesAsync"> *@
        @*     <ButtonTemplate> *@
        @*         <MudFab HtmlTag="label" *@
        @*                 Color="Color.Success" *@
        @*                 Icon="@Icons.Material.Filled.Upload" *@
        @*                 for="@context"/> *@
        @*     </ButtonTemplate> *@
        @* </MudFileUpload> *@
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(async () => await SavePooper())">Save Pooper</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    public IBaseMvvmViewModel<PooperViewModel> ViewModel { get; set; }

    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    
    private string imgHash = string.Empty;

    async Task SavePooper()
    {
        ViewModel.Data.Image = imgHash;
        var result = await CrudService.UpdateModelAsync();
    }
    
    private void CloseMe()
    {
        ViewModel.StatusType = StatusTypes.StatusCanceled;
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    
    private async Task UploadFilesAsync(IBrowserFile file)
    {
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string imageType = file.ContentType;
        imgHash = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
    }

    protected override async Task OnInitializedAsync()
    {
        ViewModel = CrudService.MvvmViewModel;
        await Task.CompletedTask;
    }

}

