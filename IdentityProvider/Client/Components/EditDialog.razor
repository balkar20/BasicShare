@using IdentityProvider.Client.ViewModels
@using IdentityProvider.Client.ViewModels.Inerfaces
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@inject IPooperViewModel ViewModel;

<MudDialog>
    <DialogContent>
        <img src="@imgUrl">
        <MudTextField T="string" Label="Name"  @bind-Value="ViewModel.Pooper.PooperAlias" @bind-Text="ViewModel.Pooper.PooperAlias"></MudTextField>
        <MudNumericField T="int" Label="Name"  @bind-Value="ViewModel.Pooper.AmountOfPoops"></MudNumericField>
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFilesAsync">
            <ButtonTemplate>
                <MudFab HtmlTag="label"
                        Color="Color.Primary"
                        Icon="@Icons.Material.Filled.Upload"
                        for="@context" />
            </ButtonTemplate>
        </MudFileUpload>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="SavePooper">Save Pooper</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    string imgUrl = string.Empty;

    void SavePooper()
    {
        var alias = ViewModel.Pooper.PooperAlias;
        var amountOfPoops = ViewModel.Pooper.AmountOfPoops;
        ViewModel.SavePooper();
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private async Task UploadFilesAsync(IBrowserFile file)
    {
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        string imageType = file.ContentType;
        imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

    }
}