@page "/login"
@using Blazored.LocalStorage
@using Mod.Auth.Models;
@using TinyCsvParser.Tokenizer.RFC4180
@inject HttpClient Http;
@*@inject IAlertService AlertService*@
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorage

<PageTitle>Login</PageTitle>

    <MudAlert Severity="Severity.Info" Variant="Variant.Filled">@Messasge</MudAlert>


<h1>Login</h1>

<div class="card">
    <h4 class=" card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Login
            </button>
            <NavLink href="account/register" class="btn btn-link">Register</NavLink>
        </EditForm>
        <MudAlert Icon="Icon"></MudAlert>
    </div>
</div>

@code {
    private bool isErr;
    private string Messasge;
    private LoginModel model = new LoginModel();
    private bool loading;
    //private readonly ILocalStorageService _localStorage;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        //AlertService.Clear();

        loading = true;
        try
        {

            var result = await Http.PostAsJsonAsync<LoginModel>("api/login", model);
            var loginResponseModel = await result.Content.ReadFromJsonAsync<LoginResponseModel>();
            await _localStorage.SetItemAsync<string>("authToken", loginResponseModel.Token);
            if (loginResponseModel.IsAuthSuccessful)
            {
                Messasge = loginResponseModel.Token;
                StateHasChanged();
                return;
            }
            Messasge = loginResponseModel.ErrorMessage;
            StateHasChanged();

    //var returnUrl = NavigationManager.BaseUri("returnUrl") ?? "";
    //NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            //AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
