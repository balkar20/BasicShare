// <auto-generated />
using System;
using Data.IdentityDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IdentityDb.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230212161514_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Auh.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AmountOfPoops")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "faf27c3e-d598-4215-9e8b-015e5bca9907",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "1037eb36-cb46-4e54-bb83-5ce1af400a01",
                            Email = "VladBalkar20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VladBalkar20@mail.ru",
                            NormalizedUserName = "VladBalkar",
                            PasswordHash = "AQAAAAIAAYagAAAAEOEr6avF3dhQEx4jw9n14wDs9sL93RQ8doEGXiJjRNPbDKhF1wCdf4jjETiB/W6OMQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "12d65610-0eff-4b0b-82fb-819829828d31",
                            TwoFactorEnabled = false,
                            UserName = "VladBalkar"
                        },
                        new
                        {
                            Id = "de7cae6c-f602-4dd3-802d-76e48456957a",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "0ef16730-721a-4106-bbe6-f7d600eb4db4",
                            Email = "VladBlack20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VladBlack20@mail.ru",
                            NormalizedUserName = "VladBlack",
                            PasswordHash = "AQAAAAIAAYagAAAAEFydVXew/lUrBMUm1cX+pXmUZRtnCuENb/ETG4gilgqi7HtuggNOzHBMBzah8kyjyw==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "df45db37-7345-460c-8dd9-8c98942bc2a2",
                            TwoFactorEnabled = false,
                            UserName = "VladBlack"
                        },
                        new
                        {
                            Id = "01eefbe1-0f88-4d9d-b3a8-80a00a2212f4",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "b25d36af-322a-47da-a226-3361715d4522",
                            Email = "NastyaKareva20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NastyaKareva20@mail.ru",
                            NormalizedUserName = "NastyaKareva",
                            PasswordHash = "AQAAAAIAAYagAAAAEMa1ilIFmhkAL0LzEbHMtTCpfDR6TpP+3vQ11T0vEPL3OUSeRgu7bJAhrbnZaZMK0A==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "5b4f9fec-c36d-476f-8980-16fc430429ff",
                            TwoFactorEnabled = false,
                            UserName = "NastyaKareva"
                        },
                        new
                        {
                            Id = "400b679f-c2c8-4567-9d43-ba4195cd1bfe",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "0d46ed8e-2d58-4439-8571-c6f1c3ac9f86",
                            Email = "NastyaBocharnikova20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NastyaBocharnikova20@mail.ru",
                            NormalizedUserName = "NastyaBocharnikova",
                            PasswordHash = "AQAAAAIAAYagAAAAEJD2aIfH7NsXINTSmoOjcGt95hHY6IX6htymC+BwHaPjpAXszJ2xgcaWj15qrO0C9A==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2995208d-5b79-4b01-a372-80e60a59172c",
                            TwoFactorEnabled = false,
                            UserName = "NastyaBocharnikova"
                        },
                        new
                        {
                            Id = "fd737bec-bb0a-4f97-975b-4f88fd34a3ad",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "2092b347-0fea-4b69-8c08-377b1569687b",
                            Email = "AdrewRojer20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AdrewRojer20@mail.ru",
                            NormalizedUserName = "AdrewRojer",
                            PasswordHash = "AQAAAAIAAYagAAAAENtR0j8kudtA5M0nuZhrOCbjtEexnuDtV9Kd4OfjlfuX1ZWsru01Sn704hFyAFinDg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9409818e-85c7-4169-85de-fe341e04f19d",
                            TwoFactorEnabled = false,
                            UserName = "AdrewRojer"
                        },
                        new
                        {
                            Id = "4e131785-454c-4e20-89e9-e7830a434baf",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "c0b25a42-0f20-45cc-b540-0297a7072a7a",
                            Email = "SanchoLeaver20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SanchoLeaver20@mail.ru",
                            NormalizedUserName = "SanchoLeaver",
                            PasswordHash = "AQAAAAIAAYagAAAAEBcjvxwTBp6/LLx4CR+qFxmXWS/rxRDPRI4Vf4Mpjx1CtRdqubcbvhE26SCHMXvUWA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "01e6c1dc-adea-4270-bdd6-ffcdfbecbcf1",
                            TwoFactorEnabled = false,
                            UserName = "SanchoLeaver"
                        });
                });

            modelBuilder.Entity("Core.Base.DataBase.Entities.PooperEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AmountOfPoops")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Poopers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4e8afb2f-0597-4c95-ba9a-c1240a0059a2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "e8ff507f-81ba-4a94-9790-0e4a09572169",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        },
                        new
                        {
                            Id = "10588fcb-2d64-40ff-8f35-d01f65f070de",
                            Name = "Pooper",
                            NormalizedName = "POOPER"
                        },
                        new
                        {
                            Id = "06a331d1-e7bb-448c-8d43-0f8a30b0cb4b",
                            Name = "Reviwer",
                            NormalizedName = "REVIWER"
                        },
                        new
                        {
                            Id = "53ea82b4-5d5a-4a68-8231-a2291d057276",
                            Name = "Maker",
                            NormalizedName = "MAKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "faf27c3e-d598-4215-9e8b-015e5bca9907",
                            RoleId = "4e8afb2f-0597-4c95-ba9a-c1240a0059a2"
                        },
                        new
                        {
                            UserId = "de7cae6c-f602-4dd3-802d-76e48456957a",
                            RoleId = "10588fcb-2d64-40ff-8f35-d01f65f070de"
                        },
                        new
                        {
                            UserId = "01eefbe1-0f88-4d9d-b3a8-80a00a2212f4",
                            RoleId = "10588fcb-2d64-40ff-8f35-d01f65f070de"
                        },
                        new
                        {
                            UserId = "400b679f-c2c8-4567-9d43-ba4195cd1bfe",
                            RoleId = "10588fcb-2d64-40ff-8f35-d01f65f070de"
                        },
                        new
                        {
                            UserId = "fd737bec-bb0a-4f97-975b-4f88fd34a3ad",
                            RoleId = "10588fcb-2d64-40ff-8f35-d01f65f070de"
                        },
                        new
                        {
                            UserId = "4e131785-454c-4e20-89e9-e7830a434baf",
                            RoleId = "10588fcb-2d64-40ff-8f35-d01f65f070de"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Base.DataBase.Entities.PooperEntity", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
