// <auto-generated />
using System;
using Data.IdentityDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IdentityDb.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Auh.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("AmountOfPoops")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "10802db0-9b25-4944-bfc6-ed10ed5469d5",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "413625df-c4ed-4351-a8c5-7b94b0e22c33",
                            Email = "VladBalkar20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VladBalkar20@mail.ru",
                            NormalizedUserName = "VladBalkar",
                            PasswordHash = "AQAAAAIAAYagAAAAEGtri29qZKXLdgHl3qKvskwdL/fD2CVOfKangcSMXvjy+e5pVp0QM/UJ5cmvNR/vew==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "edd85334-90a4-4f43-99c4-35730821bfc6",
                            TwoFactorEnabled = false,
                            UserName = "VladBalkar"
                        },
                        new
                        {
                            Id = "a672c3d3-c25b-4fac-841a-961ea2141408",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "f360edb7-f5c3-4940-b57c-43dd05248f79",
                            Email = "VladBlack20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "VladBlack20@mail.ru",
                            NormalizedUserName = "VladBlack",
                            PasswordHash = "AQAAAAIAAYagAAAAEAIU5nbqg9iSf1wAHn5CE5EvSbtYPdOrS+SRyizDc16JOZVRdamCFW1feXkEqvl1ZA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2837794d-de02-4275-9aac-0e4d5cd7f606",
                            TwoFactorEnabled = false,
                            UserName = "VladBlack"
                        },
                        new
                        {
                            Id = "847dc853-9d7a-4f1e-b39d-8fb8cdb5ba93",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "fa96e24c-62de-4b59-9552-da9c7278f238",
                            Email = "NastyaKareva20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NastyaKareva20@mail.ru",
                            NormalizedUserName = "NastyaKareva",
                            PasswordHash = "AQAAAAIAAYagAAAAEF2n0vcTrNki+npkytCNcDHL0c/sM5WVm2THT3dcvSNmLMzc/ldZrU6UYuNxtvr1WA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ee4896b7-b933-4f74-8c9d-24d4a872b983",
                            TwoFactorEnabled = false,
                            UserName = "NastyaKareva"
                        },
                        new
                        {
                            Id = "cbd70375-0612-482c-9c91-75502c647424",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "cefaed7a-8ac0-4c9d-81ed-284a66087817",
                            Email = "NastyaBocharnikova20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NastyaBocharnikova20@mail.ru",
                            NormalizedUserName = "NastyaBocharnikova",
                            PasswordHash = "AQAAAAIAAYagAAAAEOCHoaJ5HHDa0BnGVMSYaNBR5fGJtX1kuryh6EI3LDik6br7w7/R5hasB1vRQV0XfQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "d62ff0a8-194b-4c62-b56b-5a3fe12e53c0",
                            TwoFactorEnabled = false,
                            UserName = "NastyaBocharnikova"
                        },
                        new
                        {
                            Id = "ea82de2a-4659-4740-af7f-d0222055c45c",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "89a76b94-e44f-4207-a1d3-7751eeec6ff5",
                            Email = "AdrewRojer20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AdrewRojer20@mail.ru",
                            NormalizedUserName = "AdrewRojer",
                            PasswordHash = "AQAAAAIAAYagAAAAEKBE1tCJrR5TFGLGeYx8JiAao6hejXhACKTAGJObeXLkgfZdGpCoTNE0DlrBTpqCZg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "422c3951-2c32-4ca8-b967-241d47ad027f",
                            TwoFactorEnabled = false,
                            UserName = "AdrewRojer"
                        },
                        new
                        {
                            Id = "5202afb9-a7aa-4483-82f5-b3ba67eaa918",
                            AccessFailedCount = 0,
                            AmountOfPoops = 0,
                            ConcurrencyStamp = "025b7631-30ff-41a4-925e-e08919a76aa0",
                            Email = "SanchoLeaver20@mail.ru",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SanchoLeaver20@mail.ru",
                            NormalizedUserName = "SanchoLeaver",
                            PasswordHash = "AQAAAAIAAYagAAAAEA6/AKomHqQPGgxb+p83TDLefT4elKK7BV3aD0KFmGYgc0w1o3w1aDUBoQJlzK1pCQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "06bf42d0-3b36-4421-b011-f17d8c3bbca8",
                            TwoFactorEnabled = false,
                            UserName = "SanchoLeaver"
                        });
                });

            modelBuilder.Entity("Core.Base.DataBase.Entities.PooperEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AmountOfPoops")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("UserEntityId")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Poopers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ae32f7d5-e4fd-4825-89ea-5f271277689f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "fc9a3a4c-bbb7-4acb-99c1-6d7f98483a51",
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        },
                        new
                        {
                            Id = "480aaf70-cc75-4c4d-8f57-32199e399025",
                            Name = "Pooper",
                            NormalizedName = "POOPER"
                        },
                        new
                        {
                            Id = "bd1ce5b3-e269-452b-a928-beec0c3ec5a5",
                            Name = "Reviwer",
                            NormalizedName = "REVIWER"
                        },
                        new
                        {
                            Id = "c7ed38e6-26f4-4c08-a088-751fd9c33b8c",
                            Name = "Maker",
                            NormalizedName = "MAKER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "10802db0-9b25-4944-bfc6-ed10ed5469d5",
                            RoleId = "ae32f7d5-e4fd-4825-89ea-5f271277689f"
                        },
                        new
                        {
                            UserId = "a672c3d3-c25b-4fac-841a-961ea2141408",
                            RoleId = "480aaf70-cc75-4c4d-8f57-32199e399025"
                        },
                        new
                        {
                            UserId = "847dc853-9d7a-4f1e-b39d-8fb8cdb5ba93",
                            RoleId = "480aaf70-cc75-4c4d-8f57-32199e399025"
                        },
                        new
                        {
                            UserId = "cbd70375-0612-482c-9c91-75502c647424",
                            RoleId = "480aaf70-cc75-4c4d-8f57-32199e399025"
                        },
                        new
                        {
                            UserId = "ea82de2a-4659-4740-af7f-d0222055c45c",
                            RoleId = "480aaf70-cc75-4c4d-8f57-32199e399025"
                        },
                        new
                        {
                            UserId = "5202afb9-a7aa-4483-82f5-b3ba67eaa918",
                            RoleId = "480aaf70-cc75-4c4d-8f57-32199e399025"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Base.DataBase.Entities.PooperEntity", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Auh.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
